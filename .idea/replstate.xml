<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1463585534503">{:repl-history {:ide [], :local [&quot;(example)&quot; &quot;(image-example)&quot; &quot;(use 'example-image-compojure.test-app )&quot; &quot;(example-one)&quot; &quot;(list 1 2 3)&quot; &quot;(defn name\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (map (fn[to-ad]\n            (+ result to-add))\n          args))\n  ([b]\n   (add 0 b)))&quot; &quot;(defn name\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (map (fn[to-add]\n            (+ result to-add))\n          args))\n  ([b]\n   (add 0 b)))&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (map (fn[to-add]\n            (+ result to-add))\n          args))\n  ([b]\n   (add 0 b)))&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (map (fn[to-add]\n            (+ result to-add))\n          args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(adder 1)&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (reduction (fn[to-add]\n            (+ result to-add))\n             args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (reductions (fn[to-add]\n            (+ result to-add))\n             args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(adder 1 2 3 4 5 6)&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (reductions (fn[to-add]\n            (+ result to-add))\n             0\n                 args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (reduce (fn[to-add]\n            (+ result to-add))\n             result \n             args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (reduce (fn[to-add]\n            (+ result to-add))\n             args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(adder 0 12)&quot; &quot;(defn adder\n  \&quot;Diese Funktion addiert die beiden Werte der Argumente a und b\&quot;\n  ([result &amp; args]\n     (reduce (fn[result to-add]\n            (+ result to-add))\n             result\n             args))\n  ([b]\n   (adder 0 b)))&quot; &quot;(adder 0 12 12 12 12)&quot; &quot;(adder 0 1 2 3 4)&quot; &quot;(def ^:dynamic test \&quot;standard\&quot;)&quot; &quot;(def ^:dynamic standard \&quot;standard\&quot;)&quot; &quot;standard&quot; &quot;(def new binding\n  (bind [standard \&quot;neu\&quot;]\n        standard))&quot; &quot;(def new-binding\n  (bind [standard \&quot;neu\&quot;]\n        standard))&quot; &quot;(def new-binding\n  (binding [standard \&quot;neu\&quot;]\n        standard))&quot; &quot;new-binding&quot; &quot;(defmacro infix [expr]\n  (let [[left op right] expr]\n    (list op left right)))&quot; &quot;(infix (1 + 1))&quot; &quot;(macroexpand '(infix (1 + 2)))&quot; &quot;(def greet-user [{:keys [frist-name last-name]}]\n  (println (str \&quot;welcome \&quot; firs-name last-name)))&quot; &quot;(defn greet-user [{:keys [frist-name last-name]}]\n  (println (str \&quot;welcome \&quot; firs-name last-name)))&quot; &quot;(defn greet-user [{:keys [frist-name last-name]}]\n  (println (str \&quot;welcome \&quot; first-name last-name)))&quot; &quot;(defn greet-user [{:keys [first-name last-name]}]\n  (println (str \&quot;welcome \&quot; first-name last-name)))&quot; &quot;(greet-user {:first-name :last})&quot; &quot;(defn greet-user [{:keys [first-name last-name]}]\n  (println (str \&quot;welcome \&quot; first-name \&quot; \&quot; last-name)))&quot; &quot;(greet-user {:first-name \&quot;Nicolas\&quot; :last-name \&quot;Schwartau\&quot;})&quot; &quot;(def concat-hello[name]\n  (let [greeting (str \&quot;hello \&quot; name \&quot;, \&quot;)\n        #(println (str greeting %))]))&quot; &quot;(defn concat-hello[name]\n  (let [greeting (str \&quot;hello \&quot; name \&quot;, \&quot;)\n        #(println (str greeting %))]))&quot; &quot;(defn concat-hello[name]\n  (let [greeting (str \&quot;hello \&quot; name \&quot;, \&quot;)]\n        #(println (str greeting %))))&quot; &quot;(def message (concat-hello \&quot;Nicolas\&quot;))&quot; &quot;(message \&quot;Are you done yet?\&quot;)&quot; &quot;(defn concat-hello[name]\n  (let [greeting (str \&quot;Hello \&quot; name \&quot;, \&quot;)]\n        #(println (str greeting %))))&quot; &quot;(map inc [1 2 3])&quot; &quot;(reduce * {} [1 2 3])&quot; &quot;(reduce * {1} [1 2 3])&quot; &quot;(reduce * [] [1 2 3])&quot; &quot;(reduce * 1 [1 2 3])&quot; &quot;(reduce * 4 [1 2 3])&quot; &quot;(map inc 4 [1 2 3])&quot; &quot;(reduce * [1 2 3])&quot; &quot;(map * [1 2 3])&quot; &quot;(reduce * 1 [2 16])&quot; &quot;(reduce * 1 [2 21])&quot;], :remote []}}</component>
</project>